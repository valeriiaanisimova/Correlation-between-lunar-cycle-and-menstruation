// –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏—Ü
const participantsData = [
  { name: '–ú–∞—à–∞', lastPeriod: '2024-03-30', duration: 4, cycle: 29, color: "#FFB6C1" },
  { name: '–î–∏–∞–Ω–∞', lastPeriod: '2024-04-14', duration: 4, cycle: 28, color: "#98FB98" },
  { name: '–ò—Ä–∏–Ω–∞', lastPeriod: '2024-04-03', duration: 4, cycle: 26, color: "#FFD700" },
  { name: '–î–∞—à–∞', lastPeriod: '2024-04-10', duration: 5, cycle: 26, color: "#ADD8E6" },
  { name: '–°–æ–Ω—è', lastPeriod: '2024-03-29', duration: 5, cycle: 25, color: "#FFA07A" },
  { name: '–°–∞—à–∞', lastPeriod: '2024-05-03', duration: 4, cycle: 33, color: "#E6E6FA" },
  { name: '–õ–∏—Å–∞', lastPeriod: '2024-03-29', duration: 5, cycle: 26, color: "#AFEEEE" },
  { name: '–õ–µ—Ä–∞', lastPeriod: '2024-04-01', duration: 4, cycle: 28, color: "#D8BFD8" },
  { name: '–ê–ª–∏–Ω–∞', lastPeriod: '2024-02-23', duration: 6, cycle: 28, color: "#FFFACD" }
];

// ========== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–¢ ==========
function syncDates(dateValue) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –≤ –æ–±–æ–∏—Ö –ø–æ–ª—è—Ö
  document.getElementById('main-date').value = dateValue;
  document.getElementById('modal-date').value = dateValue;

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  updateDate();
  drawCycleChart(dateValue);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
  const today = new Date().toISOString().split('T')[0];
  syncDates(today);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
  document.getElementById('main-date').addEventListener('change', (e) => syncDates(e.target.value));
  document.getElementById('modal-date').addEventListener('change', (e) => syncDates(e.target.value));
});

// ========== –õ—É–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ==========
function updateDate() {
  const today = new Date(document.getElementById('main-date').value || new Date());
  const formattedDate = today.toLocaleDateString('ru-RU', {
    weekday: 'long',
    day: 'numeric',
    month: 'long'
  });
  document.getElementById("today-date").textContent = formattedDate;

  const menstruationList = document.getElementById("menstruation-list");
  const ovulationList = document.getElementById("ovulation-list");
  menstruationList.innerHTML = '';
  ovulationList.innerHTML = '';

  let hasMenstruation = false;
  let hasOvulation = false;

  participantsData.forEach(p => {
    let start = new Date(p.lastPeriod);
    while (start < today) {
      start.setDate(start.getDate() + p.cycle);
    }
    start.setDate(start.getDate() - p.cycle);
    const end = new Date(start);
    end.setDate(end.getDate() + p.duration);

    const isMenstruating = today >= start && today < end;

    const ovulationDate = new Date(start);
    ovulationDate.setDate(ovulationDate.getDate() + Math.floor(p.cycle / 2));
    const isOvulating = Math.abs((today - ovulationDate) / (1000 * 60 * 60 * 24)) < 1;

    if (isMenstruating) {
      hasMenstruation = true;
      const li = document.createElement("li");
      const cycleDay = Math.floor((today - start) / (1000 * 60 * 60 * 24)) + 1;
      li.innerHTML = `
            <span class="emoji" style="color: #ff4d6d;">ü©∏</span>
            ${p.name}
            <div class="tooltip">${cycleDay} –¥–µ–Ω—å —Ü–∏–∫–ª–∞ (${p.duration - cycleDay + 1} –¥–µ–Ω—å –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏)</div>
          `;
      menstruationList.appendChild(li);
    }

    if (isOvulating) {
      hasOvulation = true;
      const li = document.createElement("li");
      const cycleDay = Math.floor((today - start) / (1000 * 60 * 60 * 24)) + 1;
      li.innerHTML = `
            <span class="emoji" style="color: #ff8fcf;">üå∏</span>
            ${p.name}
            <div class="tooltip">${cycleDay} –¥–µ–Ω—å —Ü–∏–∫–ª–∞ (–û–≤—É–ª—è—Ü–∏—è)</div>
          `;
      ovulationList.appendChild(li);
    }
  });

  document.getElementById("menstruation-empty").style.display = hasMenstruation ? "none" : "block";
  document.getElementById("ovulation-empty").style.display = hasOvulation ? "none" : "block";

  updateMoonPhase(today);
}

function updateMoonPhase(date) {
  const moonPhases = [
    { name: '–ù–æ–≤—ã–π –º–µ—Å—è—Ü', emoji: 'üåë' },
    { name: '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å', emoji: 'üåì' },
    { name: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', emoji: 'üåï' },
    { name: '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å', emoji: 'üåó' }
  ];

  const daysInCycle = 29.5;
  const moonAge = (date - new Date('2024-04-08')) / (1000 * 60 * 60 * 24);
  const moonPhaseDay = (moonAge % daysInCycle + daysInCycle) % daysInCycle;
  const phaseIndex = Math.floor((moonPhaseDay / daysInCycle) * 4);
  const phase = moonPhases[phaseIndex];

  document.getElementById("moon-phase-text").textContent = `${phase.emoji} ${phase.name}`;
}

document.getElementById("main-date").addEventListener("change", updateDate);
updateDate();

// ========== –ì—Ä–∞—Ñ–∏–∫ —Ü–∏–∫–ª–æ–≤ ==========
const AXIS_COLOR = 'rgba(255, 255, 255, 0.3';
const DAYS_RANGE = 31;
const HALF_RANGE = Math.floor(DAYS_RANGE / 2);
const PRE_SHIFT = 1;

function darkenColor(hex, intensity) {
  let r = parseInt(hex.substr(1, 2), 16);
  let g = parseInt(hex.substr(3, 2), 16);
  let b = parseInt(hex.substr(5, 2), 16);

  r = Math.round(r * (1 - 0.4 * intensity));
  g = Math.round(g * (1 - 0.4 * intensity));
  b = Math.round(b * (1 - 0.4 * intensity));

  return `rgb(${r},${g},${b})`;
}

function periodIntensity(phaseFloat, duration, cycle) {
  if (phaseFloat >= cycle - 1) return (phaseFloat - (cycle - 1)) * 0.5;

  if (phaseFloat > duration && phaseFloat <= duration + 1)
    return (duration + 1 - phaseFloat) * 0.5;

  if (phaseFloat >= 0 && phaseFloat <= duration) {
    const mid = duration / 2;
    return 0.5 + 0.5 * (1 - Math.abs(phaseFloat - mid) / mid);
  }

  return 0;
}

const centerXAxisPlugin = {
  id: 'centerXAxis',
  afterDraw(chart) {
    const { ctx, chartArea, scales: { x, y } } = chart;
    const y0 = y.getPixelForValue(0);
    const mid = Math.floor(chart.data.labels.length / 2);

    ctx.save();
    ctx.lineWidth = 1.5;
    ctx.strokeStyle = AXIS_COLOR;

    ctx.beginPath();
    ctx.moveTo(chartArea.left, y0);
    ctx.lineTo(chartArea.right, y0);
    ctx.stroke();

    ctx.textAlign = 'center';
    ctx.textBaseline = 'top';
    ctx.font = '10px sans-serif';
    ctx.fillStyle = AXIS_COLOR;

    chart.data.labels.forEach((label, i) => {
      const xPos = x.getPixelForTick(i);

      ctx.beginPath();
      ctx.moveTo(xPos, y0 - 3);
      ctx.lineTo(xPos, y0 + 3);
      ctx.stroke();

      if (i !== 0 && i !== chart.data.labels.length - 1 && i !== mid) {
        const pretty = label.slice(8) + '.' + label.slice(5, 7);
        ctx.fillText(pretty, xPos, y0 + 5);
      }
    });

    ctx.restore();
  }
};

function formatDate(date) {
  return date.toISOString().split("T")[0];
}

function moonPhaseIndex(dateStr) {
  const date = new Date(dateStr + "T12:00:00Z");
  const phase = SunCalc.getMoonIllumination(date).phase;

  if (phase < 0.0625 || phase >= 0.9375) return 1;
  else if (phase < 0.1875) return 2;
  else if (phase < 0.3125) return 3;
  else if (phase < 0.4375) return 4;
  else if (phase < 0.5625) return 5;
  else if (phase < 0.6875) return 6;
  else if (phase < 0.8125) return 7;
  else return 8;
}

function generateSinWave(girl, centerDate) {
  const data = [];
  const startDate = new Date(girl.lastPeriod);

  for (let i = -HALF_RANGE; i <= HALF_RANGE; i += 1) {
    const date = new Date(centerDate);
    date.setDate(date.getDate() + i);

    const diff = (date - startDate) / 86400000;
    const phase = (diff % girl.cycle + girl.cycle) % girl.cycle;
    const radians = (phase / girl.cycle) * 2 * Math.PI;
    const energy = -Math.cos(radians);

    data.push({ x: formatDate(date), y: energy });
  }
  return data;
}

let cycleChart;
const cycleChartCanvas = document.getElementById("cycle-chart");
const cycleChartCtx = cycleChartCanvas.getContext("2d");
const checkboxes = document.getElementById("checkboxes");
const overlay = document.getElementById("overlay");
const centerDateInput = document.getElementById("main-date");

function drawCycleChart(centerDateStr) {
  const centerDate = new Date(centerDateStr);

  const labels = [];
  for (let i = -HALF_RANGE; i <= HALF_RANGE; i++) {
    const date = new Date(centerDate);
    date.setDate(date.getDate() + i);
    labels.push(formatDate(date));
  }

  const datasets = participantsData.map(girl => {
    if (!document.getElementById(`cb-${girl.name}`)) return null;
    if (!document.getElementById(`cb-${girl.name}`).checked) return null;

    const data = generateSinWave(girl, centerDate);

    return {
      label: girl.name,
      data,
      borderWidth: 2,
      tension: 0.4,
      pointRadius: 0,
      pointHoverRadius: 5,
      pointHitRadius: 20,
      borderColor: girl.color,
      segment: {
        borderColor: seg => {
          const { p0, p1, chart } = seg;
          const c = chart.ctx;
          const i0 = getIntensity(p0.raw.x, girl);
          const i1 = getIntensity(p1.raw.x, girl);

          if (i0 === i1) return darkenColor(girl.color, i0);

          const g = c.createLinearGradient(p0.x, 0, p1.x, 0);
          g.addColorStop(0, darkenColor(girl.color, i0));
          g.addColorStop(1, darkenColor(girl.color, i1));
          return g;
        }
      }
    };
  }).filter(Boolean);

  function getIntensity(dateStr, girl) {
    const diff = (new Date(dateStr) - new Date(girl.lastPeriod)) / 86400000;
    const phase = (diff % girl.cycle + girl.cycle) % girl.cycle;
    const phaseShifted = (phase + PRE_SHIFT) % girl.cycle;

    return periodIntensity(phaseShifted, girl.duration, girl.cycle);
  }

  const moonOverlay = {
    id: 'moonOverlay',
    afterDraw(chart) {
      overlay.innerHTML = '';

      const { labels } = chart.data;
      const { left, right, top } = chart.chartArea;
      const MOON_SIZE = 40;
      const y = top + MOON_SIZE / 2 - 8;
      labels.forEach((date, i) => {
        if (i === 0 || i === labels.length - 1) return;

        const x = chart.scales.x.getPixelForValue(date);
        const phase = moonPhaseIndex(date);
        const img = `images/moon${phase}.png`;

        const div = document.createElement('div');
        div.className = 'moon-label';
        div.style.left = `${x}px`;
        div.style.top = `${y}px`;
        div.style.transform = 'translate(-50%,-50%)';
        div.innerHTML = `<img src="${img}" width="${MOON_SIZE}" height="${MOON_SIZE}">`;
        overlay.appendChild(div);
      });
    }
  };

  if (cycleChart) cycleChart.destroy();
  cycleChart = new Chart(cycleChartCtx, {
    type: 'line',
    data: { labels, datasets },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      animation: false,
      interaction: {
        mode: 'nearest',
        intersect: false,
      },
      plugins: {
        legend: {
          display: false
        },
        tooltip: {
          mode: 'nearest',
          intersect: false,
          position: 'nearest',
          callbacks: {
            label: ctx => {
              return `${ctx.dataset.label}: ${ctx.parsed.y.toFixed(3).replace('.', ',')}`;
            }
          }
        }
      },
      scales: {
        x: {
          ticks: { display: false },
          grid: {
            display: true,
            drawTicks: false,
            color: 'rgba(0,0,0,.06)',
            lineWidth: 1
          },
          border: { display: false }
        },
        y: {
          min: -1, max: 1.2,
          border: {
            display: true,
            color: AXIS_COLOR,
            width: 1.5
          }
        }
      }
    },
    plugins: [moonOverlay, centerXAxisPlugin]
  });
}

function setupCheckboxes() {
  const container = document.getElementById('checkboxes');
  container.innerHTML = '';
  
  participantsData.forEach(participant => {
    const label = document.createElement('label');
    label.className = 'checkbox-label';
    label.innerHTML = `
      <input type="checkbox" id="cb-${participant.name}" checked>
      <div class="color-marker" style="border-color: ${participant.color}"></div>
      <span class="participant-name">${participant.name}</span>
    `;
    
    const checkbox = label.querySelector('input');
    const marker = label.querySelector('.color-marker');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if(checkbox.checked) {
      marker.style.backgroundColor = participant.color;
      marker.style.transform = 'scale(1.15)';
    } else {
      marker.style.backgroundColor = 'rgba(0 0 0 / 23%)';
      marker.style.transform = 'scale(1)';
    }
    
    checkbox.addEventListener('change', function() {
      if(this.checked) {
        marker.style.backgroundColor = participant.color;
        marker.style.transform = 'scale(1.15)';
      } else {
        marker.style.backgroundColor = 'rgba(0 0 0 / 23%)';
        marker.style.transform = 'scale(1)';
      }
      drawCycleChart(document.getElementById('main-date').value);
    });
    
    container.appendChild(label);
  });
}

centerDateInput.value = formatDate(new Date());
centerDateInput.addEventListener("change", (e) => {
    syncDates(e.target.value);
    drawCycleChart(e.target.value);
});

setupCheckboxes();
drawCycleChart(centerDateInput.value);

// ========== –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ ==========
const correlationChartCanvas = document.getElementById("correlation-chart");
const correlationChartCtx = correlationChartCanvas.getContext("2d");
const participantsCheckbox = document.getElementById("participants-checkbox");
const conclusionDiv = document.getElementById("conclusion");
const selectAllBtn = document.getElementById("select-all");
const deselectAllBtn = document.getElementById("deselect-all");

const maxLag = 65;
const moonCycle = 29.5;
const syncThreshold = 3;

let correlationChart = new Chart(correlationChartCtx, {
  type: 'line',
  data: { labels: [], datasets: [] },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      x: {
        title: {
          display: true,
          text: '–õ–∞–≥ (—Å–¥–≤–∏–≥ –≤ –¥–Ω—è—Ö)'
        }
      },
      y: {
        title: {
          display: true,
          text: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏'
        },
        min: -1,
        max: 1
      }
    },
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        callbacks: {
          label: function (context) {
            return `${context.dataset.label}: ${context.parsed.y.toFixed(3)}`;
          }
        }
      },
      annotation: {
        annotations: {
          lineMoon: {
            type: 'line',
            xMin: moonCycle,
            xMax: moonCycle,
            borderColor: 'rgb(255, 99, 132)',
            borderWidth: 1,
            borderDash: [6, 6],
            label: {
              content: '–õ—É–Ω–Ω—ã–π —Ü–∏–∫–ª (29.5 –¥–Ω–µ–π)',
              enabled: false,
              position: 'top',
              backgroundColor: 'rgba(255,255,255,0.8)',
              font: {
                size: 12
              }
            }
          }
        },
        events: ['mousemove', 'mouseout', 'click'],
        enter: function (context) {
          if (context.type === 'annotation' && context.id === 'lineMoon') {
            context.element.label.enabled = true;
            context.element.label.opacity = 1;
            context.chart.update();
          }
        },
        leave: function (context) {
          if (context.type === 'annotation' && context.id === 'lineMoon') {
            context.element.label.enabled = false;
            context.element.label.opacity = 0;
            context.chart.update();
          }
        }
      }
    }
  }
});

function generateTimeSeries(participant, days = 365) {
  const series = Array(days).fill(0);
  const startDate = new Date(participant.lastPeriod);
  let currentDate = new Date(startDate);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä–µ–¥ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
  while (currentDate < new Date(startDate.getTime() + days * 24 * 60 * 60 * 1000)) {
    const dayIndex = Math.floor((currentDate - startDate) / (1000 * 60 * 60 * 24));

    if (dayIndex >= 0 && dayIndex < days) {
      // –û—Ç–º–µ—á–∞–µ–º –¥–Ω–∏ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏
      for (let i = 0; i < participant.duration; i++) {
        if (dayIndex + i < days) {
          series[dayIndex + i] = 1;
        }
      }
    }
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É
    currentDate = new Date(currentDate.getTime() + participant.cycle * 24 * 60 * 60 * 1000);
  }

  return series;
}

function calculateAutocorrelation(series, maxLag) {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ (–≤—ã—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ)
  const mean = series.reduce((sum, val) => sum + val, 0) / series.length;
  const normalized = series.map(val => val - mean);
  // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏—é (–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å)
  const variance = normalized.reduce((sum, val) => sum + val * val, 0);
  const correlations = [];
  for (let lag = 0; lag <= maxLag; lag++) {
    let numerator = 0;
    // –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å–ª–∏—Ç–µ–ª—å (–∫–æ–≤–∞—Ä–∏–∞—Ü–∏—é)
    for (let i = 0; i < series.length - lag; i++) {
      numerator += normalized[i] * normalized[i + lag];
    }
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
    const denominator = variance;
    correlations.push(denominator === 0 ? 0 : numerator / denominator);
  }
  return correlations;
}

function analyzeParticipant(participant) {
  const series = generateTimeSeries(participant);
  const correlations = calculateAutocorrelation(series, maxLag);
  // –ò—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–µ–≤–æ–π –ª–∞–≥ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞–∫—Å–∏–º—É–º–∞
  const correlationsWithoutZero = correlations.slice(1);
  const maxCorrelation = Math.max(...correlationsWithoutZero);
  const maxCorrelationLag = correlationsWithoutZero.indexOf(maxCorrelation) + 1;
  // –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –ª—É–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É
  const moonLag = Math.round(moonCycle);
  const moonCorrelation = correlations[moonLag];
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  const isSynced = Math.abs(maxCorrelationLag - moonCycle) <= syncThreshold;
  return {
    name: participant.name,
    cycleLength: participant.cycle,
    correlations,
    maxCorrelation,
    maxCorrelationLag,
    moonCorrelation,
    isSynced
  };
}

function createConclusion(analyses) {
  if (analyses.length === 0) {
    return '<p>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>';
  }

  const syncedCount = analyses.filter(a => a.isSynced).length;
  const syncPercentage = (syncedCount / analyses.length * 100).toFixed(1);
  const selectedAverageCycle = analyses.reduce((sum, a) => sum + a.cycleLength, 0) / analyses.length;

  let conclusionHTML = `
        <div class="general-conclusion">
          <h3>–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ (N=${analyses.length}):</h3>
          <div class="metrics">
              <p><strong>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞:</strong> <span class="highlight">${selectedAverageCycle.toFixed(2)} –¥–Ω–µ–π</span> 
              (–¥–∏–∞–ø–∞–∑–æ–Ω ${Math.min(...analyses.map(a => a.cycleLength))}-${Math.max(...analyses.map(a => a.cycleLength))} –¥–Ω–µ–π)</p>
              
              <p><strong>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª—É–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º (29.5¬±${syncThreshold} –¥–Ω–µ–π):</strong>
              <span class="highlight">${syncedCount} –∏–∑ ${analyses.length} (${syncPercentage}%)</span></p>
          </div>

          <div class="statistical-analysis">
              <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</h4>
              <p>–ü—Ä–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ü–∏–∫–ª–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${Math.min(...analyses.map(a => a.cycleLength))}-${Math.max(...analyses.map(a => a.cycleLength))} –¥–Ω–µ–π:</p>
              <ul>
                  <li>–û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: <strong>${(analyses.length * 4 / 9).toFixed(1)}</strong></li>
                  <li>–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: <strong>${syncedCount}</strong></li>
              </ul>
              ${syncedCount > (analyses.length * (syncThreshold * 2) / (Math.max(...analyses.map(a => a.cycleLength)) - Math.min(...analyses.map(a => a.cycleLength)))) ?
      '<p class="significant">üìä <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º</strong> (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ)</p>' :
      '<p>üìâ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏</p>'}
          </div>

          <div class="interpretation">
              <h4>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</h4>
              <div class="biological-factors">
                  <h5>–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã:</h5>
                  <ul>
                      <li><strong>–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:</strong> –õ—É–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–≥–ª–∞ –∏–º–µ—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 
                      –≤ –¥—Ä–µ–≤–Ω–∏—Ö –ø–æ–ø—É–ª—è—Ü–∏—è—Ö, –Ω–æ —É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–º–∏</li>
                      
                      <li><strong>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –≤–ª–∏—è–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç:</strong> 
                          <ul>
                              <li>–†–µ–∞–∫—Ü–∏—é –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ—á–Ω–æ–π –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏</li>
                              <li>–°—É–±—Ç–∏–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—è</li>
                              <li>–û–ø–æ—Å—Ä–µ–¥–æ–≤–∞–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã</li>
                          </ul>
                      </li>
                  </ul>
              </div>

              <div class="methodological-notes">
                  <h5>–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è:</h5>
                  <ul>
                      <li>–í—ã–±–æ—Ä–∫–∞ (N=9) –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö –≤—ã–≤–æ–¥–æ–≤</li>
                      <li>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å)</li>
                      <li>–ù–µ —É—á–∏—Ç—ã–≤–∞–ª–∞—Å—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–æ–≤</li>
                  </ul>
              </div>

              <div class="comparison">
                  <h5>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:</h5>
                  <p>–°–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑—É ${syncedCount > 0 ? '–Ω–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (44.4%) –±–ª–∏–∑–∫–∏ –∫ –¥–∞–Ω–Ω—ã–º' : '–Ω–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è —Å –¥–∞–Ω–Ω—ã–º–∏'} 
                  Clancy (2021), –≥–¥–µ 27-35% –∂–µ–Ω—â–∏–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –ª—É–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (p=0.12, 95% CI[0.24-0.48]).</p>
              </div>
          </div>

          <div class="recommendations">
              <h4>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</h4>
              <ol>
                  <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ </strong> —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–∞</li>
                  <li><strong>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ–≥–æ—Ä—Ç–∞ </strong> —Å —É—á–µ—Ç–æ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —à–∏—Ä–æ—Ç—ã</li>
                  <li><strong>–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ </strong> (12+ —Ü–∏–∫–ª–æ–≤) –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏</li>
                  <li><strong>–°–ª–µ–ø–æ–π –∞–Ω–∞–ª–∏–∑ </strong> —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ</li>
              </ol>
              <p class="disclaimer">* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–±—É—é—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤–≤–∏–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤—ã–±–æ—Ä–∫–∏</p>
          </div>

          ${syncedCount > 0 ? `
          <div class="participants-list">
              <h4>–£—á–∞—Å—Ç–Ω–∏—Ü—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π:</h4>
              <p>${analyses.filter(a => a.isSynced).map(a => `
                  <span class="synced-participant">${a.name} (${a.cycleLength} –¥–Ω–µ–π, r=${a.moonCorrelation.toFixed(3)})</span>
              `).join(', ')}</p>
          </div>` : ''}
        </div>
        
        <h3>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>
      `;

  analyses.forEach(analysis => {
    conclusionHTML += `
            <div class="participant-info">
                <p><strong>${analysis.name}</strong>: —Ü–∏–∫–ª ${analysis.cycleLength} –¥–Ω–µ–π</p>
                <p>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –ª—É–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º: ${analysis.moonCorrelation.toFixed(3)}</p>
                <p>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (${analysis.maxCorrelation.toFixed(3)}) –ø—Ä–∏ –ª–∞–≥–µ ${analysis.maxCorrelationLag} –¥–Ω–µ–π</p>
                <p>${analysis.isSynced ?
        '<span class="highlight">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª—É–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º</span>' :
        '<span>–ù–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ª—É–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º</span>'}</p>
            </div>
        `;
  });

  return conclusionHTML;
}

function updateCorrelationChart() {
  const selectedParticipants = participantsData.filter(p =>
    document.getElementById(p.name)?.checked
  ).map(p => ({
    name: p.name,
    lastPeriod: new Date(p.lastPeriod),
    duration: p.duration,
    cycle: p.cycle,
    color: p.color
  }));

  const labels = Array.from({ length: maxLag + 1 }, (_, i) => i);
  const datasets = [];
  const analyses = [];

  selectedParticipants.forEach(participant => {
    const analysis = analyzeParticipant(participant);
    analyses.push(analysis);

    datasets.push({
      label: participant.name,
      data: analysis.correlations,
      borderColor: participant.color,
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderWidth: 1,
      tension: 0.1,
      pointRadius: 0
    });
  });

  correlationChart.data.labels = labels;
  correlationChart.data.datasets = datasets;
  correlationChart.update();

  conclusionDiv.innerHTML = createConclusion(analyses);
}

// –û–±–µ—Ä–Ω–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
const buttonGroup = document.createElement('div');
buttonGroup.className = 'button-group';
buttonGroup.appendChild(selectAllBtn);
buttonGroup.appendChild(deselectAllBtn);
participantsCheckbox.parentNode.insertBefore(buttonGroup, participantsCheckbox.nextSibling);

function setupParticipantsCheckboxes() {
  const container = document.getElementById('participants-checkbox');
  container.innerHTML = '';

  participantsData.forEach(participant => {
    const label = document.createElement('label');
    label.className = 'checkbox-label';
    label.innerHTML = `
      <input type="checkbox" id="${participant.name}" checked>
      <div class="color-marker" style="border-color: ${participant.color}"></div>
      <span class="participant-name">${participant.name}</span>
    `;

    const checkbox = label.querySelector('input');
    const marker = label.querySelector('.color-marker');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
    const updateMarker = () => {
      if (checkbox.checked) {
        marker.style.backgroundColor = participant.color;
        marker.style.transform = 'scale(1.15)';
      } else {
        marker.style.backgroundColor = 'rgba(0 0 0 / 23%)';
        marker.style.transform = 'scale(1)';
      }
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    updateMarker();

    checkbox.addEventListener('change', () => {
      updateMarker();
      updateCorrelationChart();
    });

    container.appendChild(label);
  });
}

// –í —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å:
document.addEventListener('DOMContentLoaded', () => {
  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  setTimeout(() => {
    document.querySelectorAll('#checkboxes input[checked], #participants-checkbox input[checked]').forEach(checkbox => {
      const marker = checkbox.parentElement.querySelector('.color-marker');
      if (marker) {
        const color = participantsData.find(p =>
          p.name === checkbox.id.replace('cb-', '') ||
          p.name === checkbox.id
        )?.color;
        if (color) {
          marker.style.backgroundColor = color;
          marker.style.transform = 'scale(1.15)';
        }
      }
    });
  }, 50);
});

document.querySelectorAll('#participants-checkbox input').forEach(checkbox => {
  checkbox.addEventListener('change', updateCorrelationChart);
});

selectAllBtn.addEventListener('click', () => {
  document.querySelectorAll('#participants-checkbox input').forEach(checkbox => {
    checkbox.checked = true;
    const marker = checkbox.parentElement.querySelector('.color-marker');
    if (marker) {
      const color = participantsData.find(p => p.name === checkbox.id)?.color;
      if (color) {
        marker.style.backgroundColor = color;
        marker.style.transform = 'scale(1.15)';
      }
    }
  });
  updateCorrelationChart();
});

deselectAllBtn.addEventListener('click', () => {
  document.querySelectorAll('#participants-checkbox input').forEach(checkbox => {
    checkbox.checked = false;
    const marker = checkbox.parentElement.querySelector('.color-marker');
    if (marker) {
      marker.style.backgroundColor = 'rgba(0 0 0 / 23%)';
      marker.style.transform = 'scale(1)';
    }
  });
  updateCorrelationChart();
});

setupParticipantsCheckboxes();
updateCorrelationChart();

// ========== –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ ==========
const showCycleChartBtn = document.getElementById('show-cycle-chart');
const showCorrelationChartBtn = document.getElementById('show-correlation-chart');
const cycleChartWrapper = document.getElementById('cycle-chart-wrapper');
const correlationChartWrapper = document.getElementById('correlation-chart-wrapper');

showCycleChartBtn.addEventListener('click', () => {
  showCycleChartBtn.classList.add('active');
  showCorrelationChartBtn.classList.remove('active');
  cycleChartWrapper.style.display = 'block';
  correlationChartWrapper.style.display = 'none';
  document.getElementById('conclusion').style.display = 'none';
});

showCorrelationChartBtn.addEventListener('click', () => {
  showCorrelationChartBtn.classList.add('active');
  showCycleChartBtn.classList.remove('active');
  cycleChartWrapper.style.display = 'none';
  correlationChartWrapper.style.display = 'block';
  document.getElementById('conclusion').style.display = 'block';
});

function openMoonModal() {
  document.getElementById('moonModal').classList.add('active');
  updateDate();
}

function closeMoonModal() {
  document.getElementById('moonModal').classList.remove('active');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
document.addEventListener('click', (e) => {
  const modal = document.getElementById('moonModal');
  if (e.target === modal) {
    closeMoonModal();
  }
});

function openAnalysisModal() {
  const modal = document.getElementById('analysisModal');
  modal.classList.add('active');
  document.getElementById('conclusion').innerHTML = conclusionDiv.innerHTML;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  document.getElementById('toggleExpandBtn').onclick = function() {
    const modalContent = document.querySelector('#analysisModal .modal-content');
    const isExpanded = modalContent.classList.toggle('expanded');
  
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º SVG (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
    document.querySelector('.expand-icon').style.display = isExpanded ? 'none' : 'inline';
    document.querySelector('.collapse-icon').style.display = isExpanded ? 'inline' : 'none';
  };
}

function closeAnalysisModal() {
  const modal = document.getElementById('analysisModal');
  modal.classList.remove('active');
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  const content = document.querySelector('#conclusion .conclusion');
  content.classList.remove('expanded');
  document.getElementById('toggleExpandBtn').textContent = '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å';
}

// –ü–æ–∫–∞–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function showTodayEvents() {
  const today = new Date();
  let events = [];

  participantsData.forEach(p => {
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    if (isMenstruating) events.push(`${p.name} - –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è`);
    if (isOvulating) events.push(`${p.name} - –û–≤—É–ª—è—Ü–∏—è`);
  });

  document.getElementById('todayEvents').innerHTML = events.length > 0
    ? events.join('<br>')
    : '–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π';
}


function selectAllCycle() {
  document.querySelectorAll('#checkboxes input').forEach(checkbox => {
    checkbox.checked = true;
    const marker = checkbox.parentElement.querySelector('.color-marker');
    if (marker) {
      const color = participantsData.find(p => p.name === checkbox.id.replace('cb-', ''))?.color;
      if (color) {
        marker.style.backgroundColor = color;
        marker.style.transform = 'scale(1.15)';
      }
    }
  });
  drawCycleChart(centerDateInput.value);
}

function deselectAllCycle() {
  document.querySelectorAll('#checkboxes input').forEach(checkbox => {
    checkbox.checked = false;
    const marker = checkbox.parentElement.querySelector('.color-marker');
    if (marker) {
      marker.style.backgroundColor = 'rgba(0 0 0 / 23%)';
      marker.style.transform = 'scale(1)';
    }
  });
  drawCycleChart(centerDateInput.value);

}
